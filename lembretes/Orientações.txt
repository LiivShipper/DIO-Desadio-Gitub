# Anotações Sobre as Aulas :pencil:

### GitHub

• Dir -** Faz uma listagem das pastas presentes no computador.

**• Cd -** Navegar entre as pastas.

**‣ Cd / -** Traça um caminho, junto do dir, listando as pastas no diretório Cd.

**‣ Cd Windows -** Entra na pasta windows, juntos do dir, é acessado as informações desta pasta windows.

**‣ Cd .. -** Retroceder um nível.

**• Cls -** Limpar todas as informações.

**• Tab -** Tem a função de autocompletar.

**• Mkdir -** Criar uma nova pasta.

**• Echo -** Redireciona um novo arquivo para a pasta.

**• Del -** Deleta arquivos.

**• Rmdir -** Deleta a pasta.

**‣ Git add -a:** Adicionar as novas informações ao git através do git bash.

**‣ Git status:** Verificar as informações do arquivo.

**‣ Git commit -m:** Adicionar o arquivo ao github, “” com comentários.

**‣ Git push origin main:** Enviar os arquivos para o Github.



### Scrum

**• Objetivos de Negócio -** Toda empresa tem o seu próprio objetivo e por esse motivo o software vem para ajudar a empresa nesse negócio. Por isso existem alguns requisitos necessários no processo de desenvolvimento:

**‣** Concepção 

**‣** Análise e Design

**‣** Desenvolvimento

**‣** Testes

**‣** Implantação



**•** **Product Owner (PO) -** Representante da área de negócios, não sendo um comitê, mas sim uma pessoa que define as funcionalidades do Software.

**•** **Scrum Master (SM) -** Ele garante o uso correto do Scrum. O Scrum Master não é Gerente de projetos, ele age como facilitador, auxilia o Product Owner no planejamento e estimativas do backlog.

**•** **Time de Desenvolvimento (DEV) -** Possui habilidades suficientes para desenvolver, testar, criar e desenhar, ou seja, tudo que for necessário para entregar o software funcionando.



### Lógica de Programação

 A lógica é a coerência de raciocínio de ideias; sequência coerente, regular e necessária de acontecimentos, coisas; O seu objetivo é atravessar uma rua, mas lógico, sem ser atropelado, por tanto é necessário que você olhe para os dois lados antes de atravessá-la, isso é a **sequência de coerência**.



• **Algoritmo -** É uma sequência de passos que resolve um problema. 

• **Pseudocódigo -** É uma forma genérica de escrever um algoritmo, utilizando uma linguagem simples (nativa, ou seja, em português a quem o escreve de forma a ser entendida por qualquer pessoa).



• **Fluxogramas -** É uma ferramenta utilizada para representar graficamente o algoritmo, isto é, a sequência lógica e coerente do fluxo de dados. Um fluxograma é um tipo de diagrama e pode ser entendido como uma representação esquemática de um processo.

• **Variáveis e Constantes -** Na programação, uma variável é um objeto (uma posição, frequentemente localizada na memória) capaz de reter e representar um valor ou expressão.

• **Tipos de variáveis -** As variáveis e as constantes podem ser classificadas basicamente de quatro tipos: Numéricas, Caracteres, Alfanuméricas ou Lógicas.



### Pensamento Computacional

Esse pensamento é baseado em 4 pilares: Decomposição, reconhecimento de padrões, abstração e design de algoritmos.

• **Decomposição -** consiste em dividir seus problemas complexos em subproblemas, ou seja, ele transforma seus grandes problemas em pequenos problemas.

• **Reconhecimento de padrões -** nesse caso é preciso identificar padrões ou tendências dentro de um determinado problema ou problemas distintos, essa situação pode ocorrer por similaridade e diferenças entre os problemas.

• **Abstração -** esse conceito é preciso pegar uma certa situação em um determinado cenário e extrapolar o conceito do problema para uma forma generalista.

• **Design de Algoritmos -** é ele quem irá determinar a execução eficiente do problema, automatizar, definir passo a passo a solução do problema.

Além desses pilares é necessário que o desenvolvedor tenha em mente que ele precisa aperfeiçoar, definir a solução, testá-la e eventualmente **aperfeiçoá-la**.



• **Variação dos pilares -** Além dos 4 pilares principais, nesse pensamento computacional é preciso complementar com o raciocínio lógico e o refinamento. 

O **raciocínio** é uma forma bem estruturada para solucionar seus problemas e é muito utilizado na área de ciências exatas, já o **refinamento**, quanto mais eficiente for a solução, maior será sua compreensão.